{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9f45b89a-9709-4b54-aded-9563908df61c",
   "metadata": {},
   "outputs": [],
   "source": [
    "import streamlit as st\n",
    "import pytesseract\n",
    "from PIL import Image\n",
    "import fitz  # PyMuPDF\n",
    "import os\n",
    "from openai import OpenAI\n",
    "import json\n",
    "\n",
    "# === Set your Groq API key ===\n",
    "GROQ_API_KEY = \"gsk_your_groq_key_here\"  # Replace with your actual key\n",
    "client = OpenAI(api_key=GROQ_API_KEY, base_url=\"https://api.groq.com/openai/v1\")\n",
    "\n",
    "# === Extract text from uploaded file ===\n",
    "def extract_text(file):\n",
    "    if file.name.endswith(\".pdf\"):\n",
    "        doc = fitz.open(stream=file.read(), filetype=\"pdf\")\n",
    "        text = \"\"\n",
    "        for page in doc:\n",
    "            text += page.get_text()\n",
    "        return text\n",
    "    else:\n",
    "        image = Image.open(file)\n",
    "        return pytesseract.image_to_string(image)\n",
    "\n",
    "# === Clean and format the text ===\n",
    "def clean_text(raw):\n",
    "    lines = raw.splitlines()\n",
    "    lines = [line.strip() for line in lines if line.strip()]\n",
    "    return \" \".join(lines)\n",
    "\n",
    "# === Extract key legal fields using LLM ===\n",
    "def extract_deed_info(cleaned_text):\n",
    "    prompt = f\"\"\"\n",
    "You are an intelligent assistant specialized in Indian legal land records.\n",
    "\n",
    "Extract the following fields from the land deed text below:\n",
    "\n",
    "- Deed Type\n",
    "- Buyer Name\n",
    "- Seller Name\n",
    "- Survey Number\n",
    "- Location\n",
    "- Date of Execution\n",
    "- Registration Number\n",
    "\n",
    "Return ONLY a valid JSON response with those fields and values.\n",
    "\n",
    "Text:\n",
    "{cleaned_text}\n",
    "\"\"\"\n",
    "    response = client.chat.completions.create(\n",
    "        model=\"llama3-70b-8192\",\n",
    "        messages=[{\"role\": \"user\", \"content\": prompt}],\n",
    "        temperature=0\n",
    "    )\n",
    "    return response.choices[0].message.content\n",
    "\n",
    "# === Streamlit UI ===\n",
    "st.set_page_config(page_title=\"Land Deed Scrutinizer\", layout=\"centered\")\n",
    "st.title(\"üìú Land Deed Info Extractor (Groq AI)\")\n",
    "st.markdown(\"Upload a scanned **PDF** or **image** of a land deed to extract structured legal info.\")\n",
    "\n",
    "uploaded_file = st.file_uploader(\"Upload your deed file\", type=[\"pdf\", \"png\", \"jpg\", \"jpeg\"])\n",
    "\n",
    "if uploaded_file is not None:\n",
    "    with st.spinner(\"üîç Extracting text from file...\"):\n",
    "        raw_text = extract_text(uploaded_file)\n",
    "        cleaned = clean_text(raw_text)\n",
    "\n",
    "    with st.spinner(\"ü§ñ Analyzing with Groq's LLaMA-3 model...\"):\n",
    "        output = extract_deed_info(cleaned)\n",
    "\n",
    "    try:\n",
    "        parsed_output = json.loads(output)\n",
    "        st.success(\"‚úÖ Extraction complete!\")\n",
    "        st.json(parsed_output)\n",
    "    except Exception as e:\n",
    "        st.error(\"‚ö†Ô∏è Could not parse AI output as JSON.\")\n",
    "        st.text(output)\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
